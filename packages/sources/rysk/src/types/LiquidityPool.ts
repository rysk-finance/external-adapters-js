/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export type OptionParamsStruct = {
  minCallStrikePrice: BigNumberish
  maxCallStrikePrice: BigNumberish
  minPutStrikePrice: BigNumberish
  maxPutStrikePrice: BigNumberish
  minExpiry: BigNumberish
  maxExpiry: BigNumberish
}

export type OptionParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  minCallStrikePrice: BigNumber
  maxCallStrikePrice: BigNumber
  minPutStrikePrice: BigNumber
  maxPutStrikePrice: BigNumber
  minExpiry: BigNumber
  maxExpiry: BigNumber
}

export type OptionSeriesStruct = {
  expiration: BigNumberish
  strike: BigNumberish
  isPut: boolean
  underlying: string
  strikeAsset: string
  collateral: string
}

export type OptionSeriesStructOutput = [BigNumber, BigNumber, boolean, string, string, string] & {
  expiration: BigNumber
  strike: BigNumber
  isPut: boolean
  underlying: string
  strikeAsset: string
  collateral: string
}

export interface LiquidityPoolInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment
    'aboveThresholdGradient()': FunctionFragment
    'aboveThresholdYIntercept()': FunctionFragment
    'adjustCollateral(uint256,bool)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'authority()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'belowThresholdGradient()': FunctionFragment
    'bidAskIVSpread()': FunctionFragment
    'bufferPercentage()': FunctionFragment
    'changeHandler(address,bool)': FunctionFragment
    'collateralAllocated()': FunctionFragment
    'collateralAsset()': FunctionFragment
    'collateralCap()': FunctionFragment
    'completeWithdraw(uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'deposit(uint256)': FunctionFragment
    'depositReceipts(address)': FunctionFragment
    'ephemeralDelta()': FunctionFragment
    'ephemeralLiabilities()': FunctionFragment
    'epoch()': FunctionFragment
    'epochPricePerShare(uint256)': FunctionFragment
    'executeEpochCalculation()': FunctionFragment
    'getAssets()': FunctionFragment
    'getExternalDelta()': FunctionFragment
    'getImpliedVolatility(bool,uint256,uint256,uint256)': FunctionFragment
    'getNAV()': FunctionFragment
    'getPortfolioDelta()': FunctionFragment
    'handler(address)': FunctionFragment
    'handlerBuybackOption((uint64,uint128,bool,address,address,address),uint256,address,address,uint256,int256,address)': FunctionFragment
    'handlerIssue((uint64,uint128,bool,address,address,address))': FunctionFragment
    'handlerIssueAndWriteOption((uint64,uint128,bool,address,address,address),uint256,uint256,int256,address)': FunctionFragment
    'handlerWriteOption((uint64,uint128,bool,address,address,address),address,uint256,address,uint256,int256,address)': FunctionFragment
    'hedgingReactors(uint256)': FunctionFragment
    'initiateWithdraw(uint256)': FunctionFragment
    'isTradingPaused()': FunctionFragment
    'keeper(address)': FunctionFragment
    'maxDiscount()': FunctionFragment
    'maxPriceDeviationThreshold()': FunctionFragment
    'maxTimeDeviationThreshold()': FunctionFragment
    'name()': FunctionFragment
    'nonces(address)': FunctionFragment
    'optionParams()': FunctionFragment
    'pause()': FunctionFragment
    'pauseTradingAndRequest()': FunctionFragment
    'pauseUnpauseTrading(bool)': FunctionFragment
    'paused()': FunctionFragment
    'pendingDeposits()': FunctionFragment
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
    'protocol()': FunctionFragment
    'quotePriceWithUtilizationGreeks((uint64,uint128,bool,address,address,address),uint256,bool)': FunctionFragment
    'rebalancePortfolioDelta(int256,uint256)': FunctionFragment
    'redeem(uint256)': FunctionFragment
    'removeHedgingReactorAddress(uint256,bool)': FunctionFragment
    'resetEphemeralValues()': FunctionFragment
    'riskFreeRate()': FunctionFragment
    'setAuthority(address)': FunctionFragment
    'setBidAskSpread(uint256)': FunctionFragment
    'setBufferPercentage(uint256)': FunctionFragment
    'setCollateralCap(uint256)': FunctionFragment
    'setHedgingReactorAddress(address)': FunctionFragment
    'setKeeper(address,bool)': FunctionFragment
    'setMaxDiscount(uint256)': FunctionFragment
    'setMaxPriceDeviationThreshold(uint256)': FunctionFragment
    'setMaxTimeDeviationThreshold(uint256)': FunctionFragment
    'setNewOptionParams(uint128,uint128,uint128,uint128,uint128,uint128)': FunctionFragment
    'setRiskFreeRate(uint256)': FunctionFragment
    'setUtilizationSkewParams(uint256,uint256,uint256)': FunctionFragment
    'settleVault(address)': FunctionFragment
    'strikeAsset()': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'underlyingAsset()': FunctionFragment
    'unpause()': FunctionFragment
    'utilizationFunctionThreshold()': FunctionFragment
    'withdrawalReceipts(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string
  encodeFunctionData(functionFragment: 'aboveThresholdGradient', values?: undefined): string
  encodeFunctionData(functionFragment: 'aboveThresholdYIntercept', values?: undefined): string
  encodeFunctionData(functionFragment: 'adjustCollateral', values: [BigNumberish, boolean]): string
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'belowThresholdGradient', values?: undefined): string
  encodeFunctionData(functionFragment: 'bidAskIVSpread', values?: undefined): string
  encodeFunctionData(functionFragment: 'bufferPercentage', values?: undefined): string
  encodeFunctionData(functionFragment: 'changeHandler', values: [string, boolean]): string
  encodeFunctionData(functionFragment: 'collateralAllocated', values?: undefined): string
  encodeFunctionData(functionFragment: 'collateralAsset', values?: undefined): string
  encodeFunctionData(functionFragment: 'collateralCap', values?: undefined): string
  encodeFunctionData(functionFragment: 'completeWithdraw', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'depositReceipts', values: [string]): string
  encodeFunctionData(functionFragment: 'ephemeralDelta', values?: undefined): string
  encodeFunctionData(functionFragment: 'ephemeralLiabilities', values?: undefined): string
  encodeFunctionData(functionFragment: 'epoch', values?: undefined): string
  encodeFunctionData(functionFragment: 'epochPricePerShare', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'executeEpochCalculation', values?: undefined): string
  encodeFunctionData(functionFragment: 'getAssets', values?: undefined): string
  encodeFunctionData(functionFragment: 'getExternalDelta', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getImpliedVolatility',
    values: [boolean, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'getNAV', values?: undefined): string
  encodeFunctionData(functionFragment: 'getPortfolioDelta', values?: undefined): string
  encodeFunctionData(functionFragment: 'handler', values: [string]): string
  encodeFunctionData(
    functionFragment: 'handlerBuybackOption',
    values: [OptionSeriesStruct, BigNumberish, string, string, BigNumberish, BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'handlerIssue', values: [OptionSeriesStruct]): string
  encodeFunctionData(
    functionFragment: 'handlerIssueAndWriteOption',
    values: [OptionSeriesStruct, BigNumberish, BigNumberish, BigNumberish, string],
  ): string
  encodeFunctionData(
    functionFragment: 'handlerWriteOption',
    values: [OptionSeriesStruct, string, BigNumberish, string, BigNumberish, BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'hedgingReactors', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'initiateWithdraw', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'isTradingPaused', values?: undefined): string
  encodeFunctionData(functionFragment: 'keeper', values: [string]): string
  encodeFunctionData(functionFragment: 'maxDiscount', values?: undefined): string
  encodeFunctionData(functionFragment: 'maxPriceDeviationThreshold', values?: undefined): string
  encodeFunctionData(functionFragment: 'maxTimeDeviationThreshold', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string
  encodeFunctionData(functionFragment: 'optionParams', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'pauseTradingAndRequest', values?: undefined): string
  encodeFunctionData(functionFragment: 'pauseUnpauseTrading', values: [boolean]): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'pendingDeposits', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string
  encodeFunctionData(functionFragment: 'protocol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'quotePriceWithUtilizationGreeks',
    values: [OptionSeriesStruct, BigNumberish, boolean],
  ): string
  encodeFunctionData(
    functionFragment: 'rebalancePortfolioDelta',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'removeHedgingReactorAddress',
    values: [BigNumberish, boolean],
  ): string
  encodeFunctionData(functionFragment: 'resetEphemeralValues', values?: undefined): string
  encodeFunctionData(functionFragment: 'riskFreeRate', values?: undefined): string
  encodeFunctionData(functionFragment: 'setAuthority', values: [string]): string
  encodeFunctionData(functionFragment: 'setBidAskSpread', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setBufferPercentage', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setCollateralCap', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setHedgingReactorAddress', values: [string]): string
  encodeFunctionData(functionFragment: 'setKeeper', values: [string, boolean]): string
  encodeFunctionData(functionFragment: 'setMaxDiscount', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'setMaxPriceDeviationThreshold',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxTimeDeviationThreshold',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'setNewOptionParams',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'setRiskFreeRate', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'setUtilizationSkewParams',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'settleVault', values: [string]): string
  encodeFunctionData(functionFragment: 'strikeAsset', values?: undefined): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'underlyingAsset', values?: undefined): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(functionFragment: 'utilizationFunctionThreshold', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdrawalReceipts', values: [string]): string

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'aboveThresholdGradient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'aboveThresholdYIntercept', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'adjustCollateral', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'belowThresholdGradient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bidAskIVSpread', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bufferPercentage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeHandler', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'collateralAllocated', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'collateralAsset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'collateralCap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'completeWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositReceipts', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ephemeralDelta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ephemeralLiabilities', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'epoch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'epochPricePerShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executeEpochCalculation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getExternalDelta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getImpliedVolatility', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNAV', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPortfolioDelta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'handler', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'handlerBuybackOption', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'handlerIssue', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'handlerIssueAndWriteOption', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'handlerWriteOption', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hedgingReactors', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initiateWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isTradingPaused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxDiscount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxPriceDeviationThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxTimeDeviationThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'optionParams', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pauseTradingAndRequest', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pauseUnpauseTrading', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pendingDeposits', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'protocol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quotePriceWithUtilizationGreeks', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rebalancePortfolioDelta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeHedgingReactorAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'resetEphemeralValues', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'riskFreeRate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAuthority', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBidAskSpread', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBufferPercentage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setCollateralCap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setHedgingReactorAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxDiscount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxPriceDeviationThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxTimeDeviationThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setNewOptionParams', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setRiskFreeRate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setUtilizationSkewParams', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settleVault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'strikeAsset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'underlyingAsset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'utilizationFunctionThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawalReceipts', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'AuthorityUpdated(address)': EventFragment
    'BuybackOption(address,uint256,uint256,uint256,address)': EventFragment
    'Deposit(address,uint256,uint256)': EventFragment
    'EpochExecuted(uint256)': EventFragment
    'InitiateWithdraw(address,uint256,uint256)': EventFragment
    'Paused(address)': EventFragment
    'Redeem(address,uint256,uint256)': EventFragment
    'SettleVault(address,uint256,uint256,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
    'Withdraw(address,uint256,uint256)': EventFragment
    'WriteOption(address,uint256,uint256,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuthorityUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BuybackOption'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EpochExecuted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InitiateWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SettleVault'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WriteOption'): EventFragment
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; amount: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>

export type AuthorityUpdatedEventFilter = TypedEventFilter<AuthorityUpdatedEvent>

export type BuybackOptionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  {
    series: string
    amount: BigNumber
    premium: BigNumber
    escrowReturned: BigNumber
    seller: string
  }
>

export type BuybackOptionEventFilter = TypedEventFilter<BuybackOptionEvent>

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; amount: BigNumber; epoch: BigNumber }
>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export type EpochExecutedEvent = TypedEvent<[BigNumber], { epoch: BigNumber }>

export type EpochExecutedEventFilter = TypedEventFilter<EpochExecutedEvent>

export type InitiateWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; amount: BigNumber; epoch: BigNumber }
>

export type InitiateWithdrawEventFilter = TypedEventFilter<InitiateWithdrawEvent>

export type PausedEvent = TypedEvent<[string], { account: string }>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; amount: BigNumber; epoch: BigNumber }
>

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>

export type SettleVaultEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  {
    series: string
    collateralReturned: BigNumber
    collateralLost: BigNumber
    closer: string
  }
>

export type SettleVaultEventFilter = TypedEventFilter<SettleVaultEvent>

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; amount: BigNumber }
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export type UnpausedEvent = TypedEvent<[string], { account: string }>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; amount: BigNumber; shares: BigNumber }
>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export type WriteOptionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  {
    series: string
    amount: BigNumber
    premium: BigNumber
    escrow: BigNumber
    buyer: string
  }
>

export type WriteOptionEventFilter = TypedEventFilter<WriteOptionEvent>

export interface LiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LiquidityPoolInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

    aboveThresholdGradient(overrides?: CallOverrides): Promise<[BigNumber]>

    aboveThresholdYIntercept(overrides?: CallOverrides): Promise<[BigNumber]>

    adjustCollateral(
      lpCollateralDifference: BigNumberish,
      addToLpBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    authority(overrides?: CallOverrides): Promise<[string]>

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    belowThresholdGradient(overrides?: CallOverrides): Promise<[BigNumber]>

    bidAskIVSpread(overrides?: CallOverrides): Promise<[BigNumber]>

    bufferPercentage(overrides?: CallOverrides): Promise<[BigNumber]>

    changeHandler(
      _handler: string,
      auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    collateralAllocated(overrides?: CallOverrides): Promise<[BigNumber]>

    collateralAsset(overrides?: CallOverrides): Promise<[string]>

    collateralCap(overrides?: CallOverrides): Promise<[BigNumber]>

    completeWithdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        epoch: BigNumber
        amount: BigNumber
        unredeemedShares: BigNumber
      }
    >

    ephemeralDelta(overrides?: CallOverrides): Promise<[BigNumber]>

    ephemeralLiabilities(overrides?: CallOverrides): Promise<[BigNumber]>

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>

    epochPricePerShare(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    executeEpochCalculation(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    getAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    getExternalDelta(overrides?: CallOverrides): Promise<[BigNumber] & { externalDelta: BigNumber }>

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getNAV(overrides?: CallOverrides): Promise<[BigNumber]>

    getPortfolioDelta(overrides?: CallOverrides): Promise<[BigNumber]>

    handler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    handlerIssue(
      optionSeries: OptionSeriesStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    hedgingReactors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    initiateWithdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    isTradingPaused(overrides?: CallOverrides): Promise<[boolean]>

    keeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    maxDiscount(overrides?: CallOverrides): Promise<[BigNumber]>

    maxPriceDeviationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>

    maxTimeDeviationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>

    name(overrides?: CallOverrides): Promise<[string]>

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    optionParams(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        minCallStrikePrice: BigNumber
        maxCallStrikePrice: BigNumber
        minPutStrikePrice: BigNumber
        maxPutStrikePrice: BigNumber
        minExpiry: BigNumber
        maxExpiry: BigNumber
      }
    >

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    pauseTradingAndRequest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    pauseUnpauseTrading(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    pendingDeposits(overrides?: CallOverrides): Promise<[BigNumber]>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    protocol(overrides?: CallOverrides): Promise<[string]>

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    redeem(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    removeHedgingReactorAddress(
      _index: BigNumberish,
      _override: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    resetEphemeralValues(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    riskFreeRate(overrides?: CallOverrides): Promise<[BigNumber]>

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setBidAskSpread(
      _bidAskSpread: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setBufferPercentage(
      _bufferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setCollateralCap(
      _collateralCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setHedgingReactorAddress(
      _reactorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setMaxDiscount(
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setMaxPriceDeviationThreshold(
      _maxPriceDeviationThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setMaxTimeDeviationThreshold(
      _maxTimeDeviationThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setRiskFreeRate(
      _riskFreeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setUtilizationSkewParams(
      _belowThresholdGradient: BigNumberish,
      _aboveThresholdGradient: BigNumberish,
      _utilizationFunctionThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    settleVault(
      seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    strikeAsset(overrides?: CallOverrides): Promise<[string]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    underlyingAsset(overrides?: CallOverrides): Promise<[string]>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    utilizationFunctionThreshold(overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawalReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { epoch: BigNumber; shares: BigNumber }>
  }

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

  aboveThresholdGradient(overrides?: CallOverrides): Promise<BigNumber>

  aboveThresholdYIntercept(overrides?: CallOverrides): Promise<BigNumber>

  adjustCollateral(
    lpCollateralDifference: BigNumberish,
    addToLpBalance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  authority(overrides?: CallOverrides): Promise<string>

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  belowThresholdGradient(overrides?: CallOverrides): Promise<BigNumber>

  bidAskIVSpread(overrides?: CallOverrides): Promise<BigNumber>

  bufferPercentage(overrides?: CallOverrides): Promise<BigNumber>

  changeHandler(
    _handler: string,
    auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>

  collateralAsset(overrides?: CallOverrides): Promise<string>

  collateralCap(overrides?: CallOverrides): Promise<BigNumber>

  completeWithdraw(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  depositReceipts(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      epoch: BigNumber
      amount: BigNumber
      unredeemedShares: BigNumber
    }
  >

  ephemeralDelta(overrides?: CallOverrides): Promise<BigNumber>

  ephemeralLiabilities(overrides?: CallOverrides): Promise<BigNumber>

  epoch(overrides?: CallOverrides): Promise<BigNumber>

  epochPricePerShare(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  executeEpochCalculation(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  getAssets(overrides?: CallOverrides): Promise<BigNumber>

  getExternalDelta(overrides?: CallOverrides): Promise<BigNumber>

  getImpliedVolatility(
    isPut: boolean,
    underlyingPrice: BigNumberish,
    strikePrice: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getNAV(overrides?: CallOverrides): Promise<BigNumber>

  getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>

  handler(arg0: string, overrides?: CallOverrides): Promise<boolean>

  handlerBuybackOption(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    optionRegistry: string,
    seriesAddress: string,
    premium: BigNumberish,
    delta: BigNumberish,
    seller: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  handlerIssue(
    optionSeries: OptionSeriesStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  handlerIssueAndWriteOption(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    premium: BigNumberish,
    delta: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  handlerWriteOption(
    optionSeries: OptionSeriesStruct,
    seriesAddress: string,
    amount: BigNumberish,
    optionRegistry: string,
    premium: BigNumberish,
    delta: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  hedgingReactors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  initiateWithdraw(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  isTradingPaused(overrides?: CallOverrides): Promise<boolean>

  keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>

  maxDiscount(overrides?: CallOverrides): Promise<BigNumber>

  maxPriceDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>

  maxTimeDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>

  name(overrides?: CallOverrides): Promise<string>

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  optionParams(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      minCallStrikePrice: BigNumber
      maxCallStrikePrice: BigNumber
      minPutStrikePrice: BigNumber
      maxPutStrikePrice: BigNumber
      minExpiry: BigNumber
      maxExpiry: BigNumber
    }
  >

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  pauseTradingAndRequest(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  pauseUnpauseTrading(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  protocol(overrides?: CallOverrides): Promise<string>

  quotePriceWithUtilizationGreeks(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    toBuy: boolean,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>

  rebalancePortfolioDelta(
    delta: BigNumberish,
    reactorIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  redeem(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  removeHedgingReactorAddress(
    _index: BigNumberish,
    _override: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  resetEphemeralValues(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setBidAskSpread(
    _bidAskSpread: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setBufferPercentage(
    _bufferPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setCollateralCap(
    _collateralCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setHedgingReactorAddress(
    _reactorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setKeeper(
    _keeper: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setMaxDiscount(
    _maxDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setMaxPriceDeviationThreshold(
    _maxPriceDeviationThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setMaxTimeDeviationThreshold(
    _maxTimeDeviationThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setNewOptionParams(
    _newMinCallStrike: BigNumberish,
    _newMaxCallStrike: BigNumberish,
    _newMinPutStrike: BigNumberish,
    _newMaxPutStrike: BigNumberish,
    _newMinExpiry: BigNumberish,
    _newMaxExpiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setRiskFreeRate(
    _riskFreeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setUtilizationSkewParams(
    _belowThresholdGradient: BigNumberish,
    _aboveThresholdGradient: BigNumberish,
    _utilizationFunctionThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  settleVault(
    seriesAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  strikeAsset(overrides?: CallOverrides): Promise<string>

  symbol(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  underlyingAsset(overrides?: CallOverrides): Promise<string>

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  utilizationFunctionThreshold(overrides?: CallOverrides): Promise<BigNumber>

  withdrawalReceipts(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { epoch: BigNumber; shares: BigNumber }>

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    aboveThresholdGradient(overrides?: CallOverrides): Promise<BigNumber>

    aboveThresholdYIntercept(overrides?: CallOverrides): Promise<BigNumber>

    adjustCollateral(
      lpCollateralDifference: BigNumberish,
      addToLpBalance: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    authority(overrides?: CallOverrides): Promise<string>

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    belowThresholdGradient(overrides?: CallOverrides): Promise<BigNumber>

    bidAskIVSpread(overrides?: CallOverrides): Promise<BigNumber>

    bufferPercentage(overrides?: CallOverrides): Promise<BigNumber>

    changeHandler(_handler: string, auth: boolean, overrides?: CallOverrides): Promise<void>

    collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>

    collateralAsset(overrides?: CallOverrides): Promise<string>

    collateralCap(overrides?: CallOverrides): Promise<BigNumber>

    completeWithdraw(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    depositReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        epoch: BigNumber
        amount: BigNumber
        unredeemedShares: BigNumber
      }
    >

    ephemeralDelta(overrides?: CallOverrides): Promise<BigNumber>

    ephemeralLiabilities(overrides?: CallOverrides): Promise<BigNumber>

    epoch(overrides?: CallOverrides): Promise<BigNumber>

    epochPricePerShare(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    executeEpochCalculation(overrides?: CallOverrides): Promise<void>

    getAssets(overrides?: CallOverrides): Promise<BigNumber>

    getExternalDelta(overrides?: CallOverrides): Promise<BigNumber>

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNAV(overrides?: CallOverrides): Promise<BigNumber>

    getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>

    handler(arg0: string, overrides?: CallOverrides): Promise<boolean>

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    handlerIssue(optionSeries: OptionSeriesStruct, overrides?: CallOverrides): Promise<string>

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string]>

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    hedgingReactors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    initiateWithdraw(_shares: BigNumberish, overrides?: CallOverrides): Promise<void>

    isTradingPaused(overrides?: CallOverrides): Promise<boolean>

    keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>

    maxDiscount(overrides?: CallOverrides): Promise<BigNumber>

    maxPriceDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>

    maxTimeDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    optionParams(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        minCallStrikePrice: BigNumber
        maxCallStrikePrice: BigNumber
        minPutStrikePrice: BigNumber
        maxPutStrikePrice: BigNumber
        minExpiry: BigNumber
        maxExpiry: BigNumber
      }
    >

    pause(overrides?: CallOverrides): Promise<void>

    pauseTradingAndRequest(overrides?: CallOverrides): Promise<string>

    pauseUnpauseTrading(_pause: boolean, overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    protocol(overrides?: CallOverrides): Promise<string>

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    redeem(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    removeHedgingReactorAddress(
      _index: BigNumberish,
      _override: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    resetEphemeralValues(overrides?: CallOverrides): Promise<void>

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>

    setAuthority(_newAuthority: string, overrides?: CallOverrides): Promise<void>

    setBidAskSpread(_bidAskSpread: BigNumberish, overrides?: CallOverrides): Promise<void>

    setBufferPercentage(_bufferPercentage: BigNumberish, overrides?: CallOverrides): Promise<void>

    setCollateralCap(_collateralCap: BigNumberish, overrides?: CallOverrides): Promise<void>

    setHedgingReactorAddress(_reactorAddress: string, overrides?: CallOverrides): Promise<void>

    setKeeper(_keeper: string, _auth: boolean, overrides?: CallOverrides): Promise<void>

    setMaxDiscount(_maxDiscount: BigNumberish, overrides?: CallOverrides): Promise<void>

    setMaxPriceDeviationThreshold(
      _maxPriceDeviationThreshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    setMaxTimeDeviationThreshold(
      _maxTimeDeviationThreshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    setRiskFreeRate(_riskFreeRate: BigNumberish, overrides?: CallOverrides): Promise<void>

    setUtilizationSkewParams(
      _belowThresholdGradient: BigNumberish,
      _aboveThresholdGradient: BigNumberish,
      _utilizationFunctionThreshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    settleVault(seriesAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    strikeAsset(overrides?: CallOverrides): Promise<string>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    underlyingAsset(overrides?: CallOverrides): Promise<string>

    unpause(overrides?: CallOverrides): Promise<void>

    utilizationFunctionThreshold(overrides?: CallOverrides): Promise<BigNumber>

    withdrawalReceipts(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { epoch: BigNumber; shares: BigNumber }>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      amount?: null,
    ): ApprovalEventFilter
    Approval(owner?: string | null, spender?: string | null, amount?: null): ApprovalEventFilter

    'AuthorityUpdated(address)'(authority?: null): AuthorityUpdatedEventFilter
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter

    'BuybackOption(address,uint256,uint256,uint256,address)'(
      series?: null,
      amount?: null,
      premium?: null,
      escrowReturned?: null,
      seller?: null,
    ): BuybackOptionEventFilter
    BuybackOption(
      series?: null,
      amount?: null,
      premium?: null,
      escrowReturned?: null,
      seller?: null,
    ): BuybackOptionEventFilter

    'Deposit(address,uint256,uint256)'(
      recipient?: null,
      amount?: null,
      epoch?: null,
    ): DepositEventFilter
    Deposit(recipient?: null, amount?: null, epoch?: null): DepositEventFilter

    'EpochExecuted(uint256)'(epoch?: null): EpochExecutedEventFilter
    EpochExecuted(epoch?: null): EpochExecutedEventFilter

    'InitiateWithdraw(address,uint256,uint256)'(
      recipient?: null,
      amount?: null,
      epoch?: null,
    ): InitiateWithdrawEventFilter
    InitiateWithdraw(recipient?: null, amount?: null, epoch?: null): InitiateWithdrawEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'Redeem(address,uint256,uint256)'(
      recipient?: null,
      amount?: null,
      epoch?: null,
    ): RedeemEventFilter
    Redeem(recipient?: null, amount?: null, epoch?: null): RedeemEventFilter

    'SettleVault(address,uint256,uint256,address)'(
      series?: null,
      collateralReturned?: null,
      collateralLost?: null,
      closer?: null,
    ): SettleVaultEventFilter
    SettleVault(
      series?: null,
      collateralReturned?: null,
      collateralLost?: null,
      closer?: null,
    ): SettleVaultEventFilter

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      amount?: null,
    ): TransferEventFilter
    Transfer(from?: string | null, to?: string | null, amount?: null): TransferEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'Withdraw(address,uint256,uint256)'(
      recipient?: null,
      amount?: null,
      shares?: null,
    ): WithdrawEventFilter
    Withdraw(recipient?: null, amount?: null, shares?: null): WithdrawEventFilter

    'WriteOption(address,uint256,uint256,uint256,address)'(
      series?: null,
      amount?: null,
      premium?: null,
      escrow?: null,
      buyer?: null,
    ): WriteOptionEventFilter
    WriteOption(
      series?: null,
      amount?: null,
      premium?: null,
      escrow?: null,
      buyer?: null,
    ): WriteOptionEventFilter
  }

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

    aboveThresholdGradient(overrides?: CallOverrides): Promise<BigNumber>

    aboveThresholdYIntercept(overrides?: CallOverrides): Promise<BigNumber>

    adjustCollateral(
      lpCollateralDifference: BigNumberish,
      addToLpBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    authority(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    belowThresholdGradient(overrides?: CallOverrides): Promise<BigNumber>

    bidAskIVSpread(overrides?: CallOverrides): Promise<BigNumber>

    bufferPercentage(overrides?: CallOverrides): Promise<BigNumber>

    changeHandler(
      _handler: string,
      auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>

    collateralCap(overrides?: CallOverrides): Promise<BigNumber>

    completeWithdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    depositReceipts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    ephemeralDelta(overrides?: CallOverrides): Promise<BigNumber>

    ephemeralLiabilities(overrides?: CallOverrides): Promise<BigNumber>

    epoch(overrides?: CallOverrides): Promise<BigNumber>

    epochPricePerShare(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    executeEpochCalculation(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    getAssets(overrides?: CallOverrides): Promise<BigNumber>

    getExternalDelta(overrides?: CallOverrides): Promise<BigNumber>

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNAV(overrides?: CallOverrides): Promise<BigNumber>

    getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>

    handler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    handlerIssue(
      optionSeries: OptionSeriesStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    hedgingReactors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    initiateWithdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    isTradingPaused(overrides?: CallOverrides): Promise<BigNumber>

    keeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    maxDiscount(overrides?: CallOverrides): Promise<BigNumber>

    maxPriceDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>

    maxTimeDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    optionParams(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    pauseTradingAndRequest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    pauseUnpauseTrading(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    protocol(overrides?: CallOverrides): Promise<BigNumber>

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    redeem(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    removeHedgingReactorAddress(
      _index: BigNumberish,
      _override: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    resetEphemeralValues(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setBidAskSpread(
      _bidAskSpread: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setBufferPercentage(
      _bufferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setCollateralCap(
      _collateralCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setHedgingReactorAddress(
      _reactorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setMaxDiscount(
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setMaxPriceDeviationThreshold(
      _maxPriceDeviationThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setMaxTimeDeviationThreshold(
      _maxTimeDeviationThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setRiskFreeRate(
      _riskFreeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setUtilizationSkewParams(
      _belowThresholdGradient: BigNumberish,
      _aboveThresholdGradient: BigNumberish,
      _utilizationFunctionThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    settleVault(
      seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    strikeAsset(overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    utilizationFunctionThreshold(overrides?: CallOverrides): Promise<BigNumber>

    withdrawalReceipts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    aboveThresholdGradient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    aboveThresholdYIntercept(overrides?: CallOverrides): Promise<PopulatedTransaction>

    adjustCollateral(
      lpCollateralDifference: BigNumberish,
      addToLpBalance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    belowThresholdGradient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    bidAskIVSpread(overrides?: CallOverrides): Promise<PopulatedTransaction>

    bufferPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    changeHandler(
      _handler: string,
      auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    collateralAllocated(overrides?: CallOverrides): Promise<PopulatedTransaction>

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>

    collateralCap(overrides?: CallOverrides): Promise<PopulatedTransaction>

    completeWithdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    depositReceipts(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    ephemeralDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ephemeralLiabilities(overrides?: CallOverrides): Promise<PopulatedTransaction>

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>

    epochPricePerShare(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    executeEpochCalculation(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getExternalDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getNAV(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPortfolioDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>

    handler(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    handlerIssue(
      optionSeries: OptionSeriesStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    hedgingReactors(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initiateWithdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    isTradingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    keeper(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxPriceDeviationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxTimeDeviationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    optionParams(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    pauseTradingAndRequest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    pauseUnpauseTrading(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pendingDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    redeem(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    removeHedgingReactorAddress(
      _index: BigNumberish,
      _override: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    resetEphemeralValues(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    riskFreeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setBidAskSpread(
      _bidAskSpread: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setBufferPercentage(
      _bufferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setCollateralCap(
      _collateralCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setHedgingReactorAddress(
      _reactorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setMaxDiscount(
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setMaxPriceDeviationThreshold(
      _maxPriceDeviationThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setMaxTimeDeviationThreshold(
      _maxTimeDeviationThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setRiskFreeRate(
      _riskFreeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setUtilizationSkewParams(
      _belowThresholdGradient: BigNumberish,
      _aboveThresholdGradient: BigNumberish,
      _utilizationFunctionThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    settleVault(
      seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    strikeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    utilizationFunctionThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawalReceipts(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
